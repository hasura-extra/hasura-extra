# -- The number of replicas (pods) to launch
replicaCount: 1

image:
  # -- Name of the image repository to pull the container image from.
  repository: hasura/graphql-engine
  # -- [Image pull policy](https://kubernetes.io/docs/concepts/containers/images/#updating-images) for updating already existing images on a node.
  pullPolicy: IfNotPresent
  # -- Overrides the image tag whose default is the chart appVersion.
  tag: ""
# -- Reference to one or more secrets to be used when [pulling images](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/#create-a-pod-that-uses-your-secret) (from private registries).
imagePullSecrets: []
# -- A name in place of the chart name for `app:` labels.
nameOverride: ""
# -- A name to substitute for the full names of resources.
fullnameOverride: ""

serviceAccount:
  # -- Specifies whether a service account should be created.
  create: true
  # -- Annotations to add to the service account.
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template.
  name: ""

# -- Labels to be added to pods.
podLabels: {}

# -- Annotations to be added to pods.
podAnnotations: {}

# -- Pod [security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod).
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context) for details.
podSecurityContext: {}
  # fsGroup: 2000

# -- Container [security context](https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container).
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#security-context-1) for details.
securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  # -- Kubernetes [service type](https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types).
  type: ClusterIP
  # -- Service port.
  port: 80
  # -- Annotations to be added to the service.
  annotations: {}

ingress:
  # -- Enable [ingress](https://kubernetes.io/docs/concepts/services-networking/ingress/).
  enabled: false
  # -- Ingress [class name](https://kubernetes.io/docs/concepts/services-networking/ingress/#ingress-class).
  className: ""
  # -- Annotations to be added to the ingress.
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  # -- Ingress host configuration.
  # @default -- See [values.yaml](values.yaml).
  hosts:
    - host: hasura-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  # -- Ingress TLS configuration.
  # @default -- See [values.yaml](values.yaml).
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - hasura-example.local

# -- Container resource [requests and limits](https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/).
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#resources) for details.
# @default -- No requests or limits.
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# -- Autoscaling by resources
# @default -- Disabled by default.
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- [Node selector](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector) configuration.
nodeSelector: {}

# -- [Tolerations](https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/) for node taints.
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling) for details.
tolerations: []

# -- [Affinity](https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#affinity-and-anti-affinity) configuration.
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#scheduling) for details.
affinity: {}

# -- extraEnvVarsCM append to ConfigMap with extra environment variables. See [values.yaml](values.yaml).
## E.g:
## extraEnvVarsCM:
##   ENV_STORE_IN_CONFIGMAP: value
extraEnvVarsCM: {}

# -- extraEnvVarsSecret append to Secret with extra environment variables. See [values.yaml](values.yaml).
## E.g:
## extraEnvVarsSecret:
##   ENV_STORE_IN_SECRET: value
extraEnvVarsSecret: {}

# -- Admin secret key, required to access this instance. This is mandatory when you use webhook or JWT.
adminSecret: '!ChangeMe!'

# -- Postgres database URL. Example: postgres://admin:mypass@mydomain.com:5432/mydb
dbUrl: '!ChangeMe!'

# -- secretName points to secret that is already created with environment variables such as:
## HASURA_GRAPHQL_DATABASE_URL (required)
## HASURA_GRAPHQL_ADMIN_SECRET (required)
## HASURA_GRAPHQL_JWT_SECRET (optional)
## HASURA_GRAPHQL_UNAUTHORIZED_ROLE (optional)
secretName: ""

# -- Set dev mode for GraphQL requests; include the internal key in the errors extensions of the response (if required).
devMode: 'false'

# -- Comma separated list of APIs (options: metadata, graphql, pgdump, config) to be enabled.
enableApis: 'graphql,metadata'

# -- Enable the Hasura Console (served by the server on / and /console).
enableConsole: 'true'

# -- Enable remote schema permissions.
enableRemoteSchemaPermission: 'true'

# -- Enable anonymous telemetry.
enableTelemetry: 'false'

# -- Set the logging level. Options: debug, info, warn, error.
logLevel: 'info'

# -- Set the enabled log types. This is a comma-separated list of log-types to enable.
enabledLogsType: 'http-log, webhook-log, websocket-log, query-log'

# -- Port on which graphql-engine should be served.
serverPort: 8080

# -- Host on which graphql-engine will listen.
serverHost: '*'

# -- URL of the authorization webhook required to authorize requests. See [auth webhooks docs](https://hasura.io/docs/latest/graphql/core/auth/authentication/webhook.html).
authHook: ~

# -- HTTP method to use for the authorization webhook.
authHookMode: 'GET'

# -- An object map containing type and the JWK used for verifying (and other optional details). See the [JWT docs](https://hasura.io/docs/latest/graphql/core/auth/authentication/jwt.html).
jwtSecret: {}
#  type: "HS256"
#  key: "3bd561c37d214b4496d09049fadc542c"
#  jwk_url: ""

# -- Unauthorized role, used when access-key is not sent in access-key only mode or the Authorization header is absent in JWT mode. Example: anonymous. Now whenever the “authorization” header is absent, the request’s role will default to anonymous.
unauthorizedRole: 'anonymous'

# -- CSV of list of domains, incuding scheme (http/https) and port, to allow for CORS. Wildcard domains are allowed.
corsDomain: ~

# -- Read cookie on WebSocket initial handshake even when CORS is disabled.
wsReadCookie: 'false'

# -- Maximum number of concurrent http workers delivering events at any time.
eventsHttpPoolSize: 100

# -- Interval in milliseconds to sleep before trying to fetch events again after a fetch returned no events from postgres
eventsFetchInterval: ~

# -- Maximum number of events to be fetched from the DB in a single batch.
eventsFetchBatchSize: 100

# -- Interval in milliseconds to sleep before trying to fetch async actions again after a fetch returned no async actions from metadata storage. Value 0 implies completely disable fetching async actions from the storage.
asyncActionsFetchInterval: ~

# -- Number of stripes (distinct sub-pools) to maintain with Postgres. New connections will be taken from a particular stripe pseudo-randomly.
pgStripes: 1

# -- Stringify certain Postgres numeric types, specifically bigint, numeric, decimal and double precision as they don’t fit into the IEEE-754 spec for JSON encoding-decoding.
stringifyNumericTypes: 'false'

# -- Updated results (if any) will be sent at most once in this interval (in milliseconds) for live queries which can be multiplexed.
liveQueriesMultiplexedRefetchInterval: 1000

# -- Multiplexed live queries are split into batches of the specified size.
liveQueriesMultiplexedBatchSize: 100

# -- Restrict queries allowed to be executed by the GraphQL engine to those that are part of the configured allow-list.
enableAllowlist: 'false'

# -- Set the value to /srv/console-assets for the console to load assets from the server itself instead of CDN.
consoleAssetsDir: ~

# -- Include the internal key in the errors extensions of the response for GraphQL requests with the admin role (if required).
adminInternalErrors: ~

# -- When set to false, a function f, stable, immutable or volatile is only exposed for a role r if there is a permission defined on the function f for the role r, creating a function permission will only be allowed if there is a select permission on the table type.
# When set to true or the flag is omitted, the permission of the function is inferred from the select permissions from the target table of the function, only for stable/immutable functions. Volatile functions are not exposed to any of the roles in this case.
inferFunctionPermissions: 'true'

# -- Interval to poll metadata storage for updates in milliseconds - Set to 0 to disable.
schemaSyncPollInterval: 1000

# -- Timeout (in seconds) to wait for the in-flight events (event triggers and scheduled triggers) and async actions to complete before the server shuts down completely. If the in-flight events are not completed within the timeout, those events are marked as pending.
gracefulShutdownTimeout: 60

# -- Disable updating of metadata on the server.
enableMaintainceMode: 'false'

# -- Enable WebSocket permessage-deflate compression.
connectionCompression: 'false'

# -- Used to set the Keep Alive delay for client that use the subscription-transport-ws (Apollo) protocol. For graphql-ws clients the graphql-engine sends PING messages instead.
websocketKeepalive: 5

# -- Used to set the connection initialisation timeout for graphql-ws clients. This is ignored for subscription-transport-ws (Apollo) clients.
websocketConnectionInitTimeout: 3

# -- List of experimental features to be enabled. A comma separated value is expected. Options: inherited_roles, naming_convention, streaming_subscriptions.
experimentalFeatures: ~

# -- Used to set the default naming convention for all sources. See [naming convention](https://hasura.io/docs/latest/schema/postgres/naming-convention/) for more information.
defaultNamingConvention: 'hasura-default'

# -- The schema in which Hasura can install extensions in the metadata database. Default: public.
metadataDatabaseExtensionsSchema: 'public'

# -- Enable sending compressed logs to metrics server.
enableLogCompression: 'false'

# -- Enables the query field in http-logs for metadata queries.
enableMetadataQueryLogging: 'false'

# -- Evaluate null values in where input object to True instead of error.
v1BooleanNullCollapse: ~

# -- Whether or not to send the request body (graphql request/variables) to the auth hook in POST mode.
authHookSendRequestBody: 'true'

# -- When metadata changes, close all WebSocket connections (with error code 1012). This is useful when you want to ensure that all clients reconnect to the latest metadata.
closeWebsocketsOnMetadataChange: 'true'

# -- Enables the Apollo Federation feature. This allows Hasura to be connected as a subgraph in an Apollo supergraph.
enableApolloFederation: 'false'

# -- Sets the log-level as error for Trigger type error logs (Event Triggers, Scheduled Triggers, Cron Triggers).
enableTriggersErrorLogLevel: 'true'

# -- For streaming queries which can be multiplexed, updated results - if any - will be sent, at most, once during this interval.
streamingQueriesMultiplexedRefetchInterval: 1000
